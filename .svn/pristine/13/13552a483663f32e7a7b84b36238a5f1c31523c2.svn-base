package com.wanding.face;

import android.Manifest;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.SoundPool;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.RemoteException;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;

import com.baidu.tts.chainofresponsibility.logger.LoggerProxy;
import com.baidu.tts.client.SpeechSynthesizer;
import com.baidu.tts.client.SpeechSynthesizerListener;
import com.baidu.tts.client.TtsMode;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DecodeFormat;
import com.geekmaker.paykeyboard.DefaultKeyboardListener;
import com.geekmaker.paykeyboard.ICheckListener;
import com.geekmaker.paykeyboard.IPayRequest;
import com.geekmaker.paykeyboard.PayKeyboard;
import com.geekmaker.paykeyboard.USBDetector;
import com.sym.libs.usbprint.USBPrinter;
import com.tencent.wxpayface.IWxPayfaceCallback;
import com.tencent.wxpayface.WxPayFace;
import com.tencent.wxpayface.WxfacePayCommonCode;
import com.wanding.face.activity.AuthConfirmActivity;
import com.wanding.face.activity.BrushFaceAuthActivity;
import com.wanding.face.activity.CardVerificaActivity;
import com.wanding.face.activity.EnterPasswdActivity;
import com.wanding.face.baidu.tts.InitConfig;
import com.wanding.face.baidu.tts.MainHandlerConstant;
import com.wanding.face.baidu.tts.MySyntherizer;
import com.wanding.face.baidu.tts.NonBlockSyntherizer;
import com.wanding.face.baidu.tts.OfflineResource;
import com.wanding.face.baidu.tts.UiMessageListener;
import com.wanding.face.bean.UserBean;
import com.wanding.face.bean.WdPreAuthHistoryVO;
import com.wanding.face.facetest.IFSMainActivity;
import com.wanding.face.httputil.NetworkUtils;
import com.wanding.face.usb.keyboar.USBKeyboard;
import com.wanding.face.utils.DecimalUtil;
import com.wanding.face.utils.EditTextUtils;
import com.wanding.face.utils.SharedPreferencesUtil;
import com.wanding.face.utils.ToastUtil;
import com.wanding.face.utils.USBkeyboardUtil;
import com.wanding.face.utils.Utils;
import com.youth.banner.Banner;
import com.youth.banner.BannerConfig;
import com.youth.banner.Transformer;
import com.youth.banner.listener.OnBannerListener;
import com.youth.banner.loader.ImageLoader;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.ViewInject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@ContentView(R.layout.activity_main)
public class MainActivity extends BaseActivity implements View.OnClickListener ,OnBannerListener ,USBKeyboard.OnKeyboardValueListener {

    private static final int REQUEST_PERMISSION = 0x001;//动态权限注册请求码


    @ViewInject(R.id.wxface_btDemoTest)
    Button wxFaceDemoTest;
    @ViewInject(R.id.wxface_btTest)
    Button wxFaceTest;

    @ViewInject(R.id.main_banner)
    private Banner banner;

    @ViewInject(R.id.main_layoutMoney)
    LinearLayout layoutMoney;
    @ViewInject(R.id.main_etMoney)
    EditText etSumMoney;

    /**
     *  要申请的动态权限
     */
    String[] permissions = new String[]{
            // 读写 sd card 权限非常重要, android6.0默认禁止的, 建议初始化之前就弹窗让用户赋予该权限
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            // read phone state用于获取 imei 设备信息
            Manifest.permission.READ_PHONE_STATE,
            //联网获取地理位置权限
            Manifest.permission.ACCESS_FINE_LOCATION,
            //蓝牙搜索设备获取地理位置权限
            Manifest.permission.ACCESS_COARSE_LOCATION,
            //相机权限
            Manifest.permission.CAMERA

    };

    /**
     * 未申请权限集合
     */
    List<String> mPermissionList = new ArrayList<>();


    // ================== 初始化参数设置开始 ==========================
    /**
     * 发布时请替换成自己申请的appId appKey 和 secretKey。注意如果需要离线合成功能,请在您申请的应用中填写包名。
     * 本demo的包名是com.baidu.tts.sample，定义在build.gradle中。
     */
    protected String appId = "16430837";

    protected String appKey = "oGmarGAowd3DN4cvGi4KQEKc";

    protected String secretKey = "QZsOmlEKtqiLMqKAxYWjAakXuGtOsNvh";

    // TtsMode.MIX; 离在线融合，在线优先； TtsMode.ONLINE 纯在线； 没有纯离线
    protected TtsMode ttsMode = TtsMode.ONLINE;

    // 离线发音选择，VOICE_FEMALE即为离线女声发音。
    // assets目录下bd_etts_common_speech_m15_mand_eng_high_am-mix_v3.0.0_20170505.dat为离线男声模型；
    // assets目录下bd_etts_common_speech_f7_mand_eng_high_am-mix_v3.0.0_20170512.dat为离线女声模型
    protected String offlineVoice = OfflineResource.VOICE_MALE;

    // ===============初始化参数设置完毕，更多合成参数请至getParams()方法中设置 =================

    // 主控制类，所有合成控制方法从这个类开始
    public static MySyntherizer synthesizer;

    /**
     * 金额拼接
     */
    public StringBuilder pending = new StringBuilder();
    /**
     * banner图集合
     */
    private ArrayList<Integer> list_path;
    private ArrayList<String> list_title;

    /**
     * 欢迎使用微信刷脸支付播报完成不在重复回调
     */
    private boolean isSpeak = true;

    /**
     * 登录用户
     */
    private UserBean userBean;

    private SoundPool soundPool;
    private Map<Integer, Integer> soundMap;
    private SharedPreferencesUtil sharedPreferencesUtil;

    /**
     * 定制键盘
     */
    public static USBKeyboard usbKeyboard;
    private boolean isKeyboardValidity = true;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        try {
            super.onCreate(savedInstanceState);
            Intent intent = getIntent();
            userBean = (UserBean) intent.getSerializableExtra("userBean");
            registerPermission();
            initView();
            initListener();
            // 初始化TTS引擎
            initialTts();

            // cpu 架构
            Log.e("Tag", "cpu arch = " + (Build.VERSION.SDK_INT < 21 ? Build.CPU_ABI : Build.SUPPORTED_ABIS[0]));
            //初始化人脸SDK
            initWxpayface();



        }catch (Exception e){
            e.printStackTrace();
        }

    }

    @Override
    protected void onStart() {
        super.onStart();
        //注册广播接收USB插入拔出状态
        registerUSBReceiver();
        Log.e(TAG,"onStart....");
    }



    @Override
    protected void onResume() {
        super.onResume();
        if(pending!=null&&pending.length()>0){
            //清空pending
            pending.delete( 0, pending.length() );
        }
        etSumMoney.setText(pending.toString());
        try{
            //初始化打印机
            USBPrinter.initPrinter(this,true);
            //初始化键盘
            usbKeyboard = USBKeyboard.getInstance();
            usbKeyboard.openKayboard(activity);
            usbKeyboard.getOnKeyboardValueListener(this);
        }catch (Exception e){
            e.printStackTrace();
        }
        isKeyboardValidity = true;
        Log.e(TAG,"onResume....");
    }

    @Override
    protected void onStop() {
        super.onStop();
        isKeyboardValidity = false;
        Log.e(TAG,"onStop....");
    }

    private void registerUSBReceiver(){

        try{
            //USB插入拔出状态
            IntentFilter filter = new IntentFilter(USBPrinter.IS_USB_CONN_ACTION);
            registerReceiver(USBPrintReceiver, filter);
            //USB键盘调用打开状态
            IntentFilter keyboardFilter = new IntentFilter(USBKeyboard.IS_USB_OPEN_STATE);
            registerReceiver(keyboardReceiver, keyboardFilter);
        }catch (Exception e){
            e.printStackTrace();
        }

    }




    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(synthesizer!=null){

            synthesizer.release();
        }
        try{
            WxPayFace.getInstance().releaseWxpayface(activity);
            USBPrinter.getInstance().close();
            usbKeyboard.release();
        }catch (Exception e){
            e.printStackTrace();
            showToast("人脸SDK不存在！");
        }
        SharedPreferencesUtil sharedPreferencesUtil = new SharedPreferencesUtil(activity, Constants.DEVICE_FILE_NAME);
        sharedPreferencesUtil.put(Constants.DEVICE_STATE_KEY,Constants.DEVICE_STATE_DISCONNET);
        sharedPreferencesUtil.put(Constants.DEVICE_TYPE_KEY,"");
        Log.e(TAG, "释放资源成功");
        if(USBPrintReceiver != null){
            unregisterReceiver(USBPrintReceiver);
        }
        if(keyboardReceiver != null){
            unregisterReceiver(keyboardReceiver);
        }


    }
    /** 初始化View  */
    private void initView(){

        //放图片地址的集合
        list_path = new ArrayList<>();
        //放标题的集合
        list_title = new ArrayList<>();
        list_path.add(R.drawable.banner11_icon);
        list_path.add(R.drawable.banner2_icon);
        list_path.add(R.drawable.banner3_icon);
        list_path.add(R.drawable.banner4_icon);
        list_path.add(R.drawable.banner5_icon);

//        list_path.add("http://ww4.sinaimg.cn/large/006uZZy8jw1faic21363tj30ci08ct96.jpg");
//        list_path.add("http://ww4.sinaimg.cn/large/006uZZy8jw1faic259ohaj30ci08c74r.jpg");
//        list_path.add("http://ww4.sinaimg.cn/large/006uZZy8jw1faic2b16zuj30ci08cwf4.jpg");
//        list_path.add("http://ww4.sinaimg.cn/large/006uZZy8jw1faic2e7vsaj30ci08cglz.jpg");
        list_title.add("1");
        list_title.add("2");
        list_title.add("3");
        list_title.add("4");
        list_title.add("5");
//        list_title.add("3");
//        list_title.add("4");
        //设置内置样式(显示圆形指示器和标题（水平显示)，共有六种可以点入方法内逐一体验使用。
        banner.setBannerStyle(BannerConfig.CIRCLE_INDICATOR_TITLE_INSIDE);
        //设置图片加载器，图片加载器在下方
        banner.setImageLoader(new MyLoader());
        //设置图片网址或地址的集合
        banner.setImages(list_path);
        //设置轮播的动画效果，内含多种特效，可点入方法内查找后内逐一体验
        banner.setBannerAnimation(Transformer.Default);
        //设置轮播图的标题集合
        banner.setBannerTitles(list_title);
        //设置轮播间隔时间
        banner.setDelayTime(5000);
        //设置是否为自动轮播，默认是“是”。
        banner.isAutoPlay(true);
        //设置指示器的位置，小点点，左中右。
        banner.setIndicatorGravity(BannerConfig.CENTER)
                //以上内容都可写成链式布局，这是轮播图的监听。比较重要。方法在下面。
                .setOnBannerListener(this)
                //必须最后调用的方法，启动轮播图。
                .start();

        //设置金额框输入规则
//        EditTextUtils.setPricePoint(etSumMoney);
        //强制隐藏Android输入法窗体
        InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        //EditText始终不弹出软件键盘
        etSumMoney.setInputType(InputType.TYPE_NULL);
        imm.hideSoftInputFromWindow(etSumMoney.getWindowToken(),0);

        /**
         *
         */
        soundPool=new SoundPool(10, AudioManager.STREAM_SYSTEM, 5);
        soundMap=new HashMap<Integer,Integer>();
        soundMap.put(0, soundPool.load(this,R.raw.zero ,1));
        soundMap.put(1, soundPool.load(this,R.raw.one ,1));
        soundMap.put(2, soundPool.load(this,R.raw.two ,1));
        soundMap.put(3, soundPool.load(this,R.raw.three ,1));
        soundMap.put(4, soundPool.load(this,R.raw.four ,1));
        soundMap.put(5, soundPool.load(this,R.raw.five ,1));
        soundMap.put(6, soundPool.load(this,R.raw.six ,1));
        soundMap.put(7, soundPool.load(this,R.raw.seven ,1));
        soundMap.put(8, soundPool.load(this,R.raw.eight ,1));
        soundMap.put(9, soundPool.load(this,R.raw.nine ,1));
        soundMap.put(10, soundPool.load(this,R.raw.num ,1));
        sharedPreferencesUtil = new SharedPreferencesUtil(activity,"test");
        sharedPreferencesUtil.put("str","");
        etSumMoney.addTextChangedListener(textWatcher);
    }

    private void initListener(){
        wxFaceDemoTest.setOnClickListener(this);
        wxFaceTest.setOnClickListener(this);
        layoutMoney.setOnClickListener(this);
    }


    /**
     * 初始化引擎，需要的参数均在InitConfig类里
     * <p>
     * DEMO中提供了3个SpeechSynthesizerListener的实现
     * MessageListener 仅仅用log.i记录日志，在logcat中可以看见
     * UiMessageListener 在MessageListener的基础上，对handler发送消息，实现UI的文字更新
     * FileSaveListener 在UiMessageListener的基础上，使用 onSynthesizeDataArrived回调，获取音频流
     */
    protected void initialTts() {
        LoggerProxy.printable(true); // 日志打印在logcat中
        // 设置初始化参数
        // 此处可以改为 含有您业务逻辑的SpeechSynthesizerListener的实现类
        SpeechSynthesizerListener listener = new UiMessageListener(mainHandler);

        Map<String, String> params = getParams();


        // appId appKey secretKey 网站上您申请的应用获取。注意使用离线合成功能的话，需要应用中填写您app的包名。包名在build.gradle中获取。
        InitConfig initConfig = new InitConfig(appId, appKey, secretKey, ttsMode, params, listener);

        /*// 如果您集成中出错，请将下面一段代码放在和demo中相同的位置，并复制InitConfig 和 AutoCheck到您的项目中
        // 上线时请删除AutoCheck的调用
        AutoCheck.getInstance(getApplicationContext()).check(initConfig, new Handler() {
            @Override
            public void handleMessage(Message msg) {
                if (msg.what == 100) {
                    AutoCheck autoCheck = (AutoCheck) msg.obj;
                    synchronized (autoCheck) {
                        String message = autoCheck.obtainDebugMessage();
                        Log.e("AutoCheckMessage", message);
                    }
                }
            }

        });*/
        synthesizer = new NonBlockSyntherizer(this, initConfig, mainHandler); // 此处可以改为MySyntherizer 了解调用过程


    }

    /**
     * 合成的参数，可以初始化时填写，也可以在合成前设置。
     *
     * @return
     */
    protected Map<String, String> getParams() {
        Map<String, String> params = new HashMap<String, String>();
        // 以下参数均为选填
        // 设置在线发声音人： 0 普通女声（默认） 1 普通男声 2 特别男声 3 情感男声<度逍遥> 4 情感儿童声<度丫丫>
        params.put(SpeechSynthesizer.PARAM_SPEAKER, "0");
        // 设置合成的音量，0-9 ，默认 5
        params.put(SpeechSynthesizer.PARAM_VOLUME, "9");
        // 设置合成的语速，0-9 ，默认 5
        params.put(SpeechSynthesizer.PARAM_SPEED, "6");
        // 设置合成的语调，0-9 ，默认 5
        params.put(SpeechSynthesizer.PARAM_PITCH, "6");

        params.put(SpeechSynthesizer.PARAM_MIX_MODE, SpeechSynthesizer.MIX_MODE_HIGH_SPEED_SYNTHESIZE);
        // 该参数设置为TtsMode.MIX生效。即纯在线模式不生效。
        // MIX_MODE_DEFAULT 默认 ，wifi状态下使用在线，非wifi离线。在线状态下，请求超时6s自动转离线
        // MIX_MODE_HIGH_SPEED_SYNTHESIZE_WIFI wifi状态下使用在线，非wifi离线。在线状态下， 请求超时1.2s自动转离线
        // MIX_MODE_HIGH_SPEED_NETWORK ， 3G 4G wifi状态下使用在线，其它状态离线。在线状态下，请求超时1.2s自动转离线
        // MIX_MODE_HIGH_SPEED_SYNTHESIZE, 2G 3G 4G wifi状态下使用在线，其它状态离线。在线状态下，请求超时1.2s自动转离线

        try{
            // 离线资源文件， 从assets目录中复制到临时目录，需要在initTTs方法前完成
            OfflineResource offlineResource = createOfflineResource(offlineVoice);
            // 声学模型文件路径 (离线引擎使用), 请确认下面两个文件存在
            params.put(SpeechSynthesizer.PARAM_TTS_TEXT_MODEL_FILE, offlineResource.getTextFilename());
            params.put(SpeechSynthesizer.PARAM_TTS_SPEECH_MODEL_FILE,offlineResource.getModelFilename());
        }catch (Exception e){
            e.printStackTrace();
        }

        return params;
    }


    protected OfflineResource createOfflineResource(String voiceType) {
        OfflineResource offlineResource = null;
        try {
            offlineResource = new OfflineResource(this, voiceType);
        } catch (IOException e) {
            // IO 错误自行处理
            e.printStackTrace();
            Log.e("erroe",e.getMessage());
        } catch (Exception e) {
            // IO 错误自行处理
            e.printStackTrace();
            Log.e("erroe",e.getMessage());
        }
        return offlineResource;
    }

    /**
     * speak 实际上是调用 synthesize后，获取音频流，然后播放。
     * 获取音频流的方式见SaveFileActivity及FileSaveListener
     * 需要合成的文本text的长度不能超过1024个GBK字节。
     */
    private void speak(String text) {
        try {
            int result = synthesizer.speak(text);
            checkResult(result, "speak");
        }catch (Exception e){
            e.printStackTrace();
        }

    }

    /**
     * 暂停播放
     */
    private void stop() {
        try {
            int result = synthesizer.stop();
            checkResult(result, "speak");
        }catch (Exception e){
            e.printStackTrace();
        }

    }

    private void checkResult(int result, String method) {
        if (result != 0) {
//            toPrint("error code :" + result + " method:" + method + ", 错误码文档:http://yuyin.baidu.com/docs/tts/122 ");
            Log.e("error code :", result+" method:" + method );
        }
        isSpeak = false;
    }
    /**
     * 初始化微信人脸SDK
     */
    private void initWxpayface(){

        try{

            Map<String,String> map = new HashMap<>();
//        map.put("ip", "192.168.1.1"); //若没有代理,则不需要此行
//        map.put("port", "8888");//若没有代理,则不需要此行
            WxPayFace.getInstance().initWxpayface(this, map, new IWxPayfaceCallback() {
                @Override
                public void response(Map map) throws RemoteException {
                    if (!isSuccessInfo(map)) {
                        return;
                    }
                    int msg = NetworkUtils.MSG_WHAT_ONEHUNDRED;
                    String text = "初始化完成";
                    sendMessage(msg,text);
//                    showToast("初始化完成");


                }
            });
        }catch (Exception e){
            e.printStackTrace();
            showToast("人脸SDK不存在！");
        }

    }


    public void sendMessage(int what,String text){
        Message msg = new Message();
        msg.what = what;
        msg.obj = text;
        handler.sendMessage(msg);
    }

    public Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            String errorJsonText = "";
            switch (msg.what){
                case NetworkUtils.MSG_WHAT_ONEHUNDRED:
                    String hintMsg = (String) msg.obj;
                    break;
                default:
                    finish();
                    break;
            }
        }
    };


    @Override
    protected void handle(Message msg) {
        switch (msg.what) {
            case MainHandlerConstant.INIT_SUCCESS:
                if(isSpeak){
                    speak("欢迎使用微信刷脸支付");
                }
                break;
            default:
                break;
        }
        super.handle(msg);
    }

    /**
     * Android6.0动态注册权限
     */
    private void registerPermission(){
        try{
            if (Build.VERSION.SDK_INT >= 23) {
                //清空没有通过的权限
                mPermissionList.clear();
                //逐个判断你要的权限是否已经通过
                for (int i = 0; i < permissions.length; i++) {
                    if (ContextCompat.checkSelfPermission(this, permissions[i]) != PackageManager.PERMISSION_GRANTED) {
                        //添加还未授予的权限
                        mPermissionList.add(permissions[i]);
                    }
                }
                //申请权限
                if (mPermissionList.size() > 0) {
                    //有权限没有通过，需要申请
                    ActivityCompat.requestPermissions(this, permissions, REQUEST_PERMISSION);
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            ToastUtil.showText(activity,"权限注册失败！",1);
        }

    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        try{
            // android 6.0以上动态授权的回调
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);

            boolean hasPermissionDismiss = false;//有权限没有通过
            if (REQUEST_PERMISSION == requestCode) {
                for (int i = 0; i < grantResults.length; i++) {
                    if (grantResults[i] == -1) {
                        hasPermissionDismiss = true;
                    }
                }
                //如果有权限没有被允许
                if (hasPermissionDismiss) {

                    //跳转到系统设置权限页面，或者直接关闭页面，不让他继续访问
                    showPermissionDialog();

                }else{
                    //全部权限通过，可以进行下一步操作。。。

                }
            }
        }catch (Exception e){
            e.printStackTrace();
//            ToastUtil.showText(activity,"权限失败！",1);
        }

    }

    /**
     * 弹出权限设置
     */
    AlertDialog mPermissionDialog;
    String mPackName = "com.wanding.face";

    private void showPermissionDialog() {
        try {
            if (mPermissionDialog == null) {
                mPermissionDialog = new AlertDialog.Builder(this)
                        .setMessage("已禁用权限，请手动授予")
                        .setPositiveButton("设置", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                cancelPermissionDialog();

                                Uri packageURI = Uri.parse("package:" + mPackName);
                                Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packageURI);
                                startActivity(intent);
                            }
                        })
                        .setNegativeButton("取消", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                //关闭页面或者做其他操作
                                cancelPermissionDialog();

                            }
                        })
                        .create();
            }
            mPermissionDialog.show();
        }catch (Exception e){
            e.printStackTrace();
        }

    }

    //关闭对话框
    private void cancelPermissionDialog() {
        mPermissionDialog.cancel();
    }


    /**
     * 发起支付第一步
     */
    private void payMethodOne(String totalFee,String key){
        stop();
        String totalFeeStr = "";
        try {
            Log.e("输入框金额值：", totalFee);
            if(Utils.isEmpty(totalFee)){
                speak("退款");
                Intent intent = new Intent();
                intent.setClass(activity,EnterPasswdActivity.class);
                intent.putExtra("userBean",userBean);
                intent.putExtra("action",Constants.ACTION_PASSWD_FAST_REFUND);
                startActivity(intent);
            }else{
                totalFeeStr =  DecimalUtil.StringToPrice(totalFee);
                Log.e("金额值转换后：", totalFeeStr);
                //金额是否合法
                int isCorrect = DecimalUtil.isEqual(totalFeeStr);
                if(isCorrect != 1){
                    ToastUtil.showText(activity,"请输入有效金额！",1);
                    speak("请输入正确的支付金额！");
                    return;
                }
                //金额四舍五入
                totalFeeStr = DecimalUtil.StringToDoublePrice(totalFee);
                payMethodTwo(totalFeeStr,key);
            }



        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();

        }
    }

    private void payMethodTwo(String totalFee,String key){

        Intent intent = new Intent();
        if("SL".equals(key)){

            intent.setClass(activity,BrushFaceActivity.class);
        }else{
            intent.setClass(activity,BrushFaceAuthActivity.class);
        }


        intent.putExtra("userBean",userBean);
        intent.putExtra("totalFee",totalFee);
        startActivity(intent);
        //清空pending的值

    }

    @Override
    public void OnBannerClick(int position) {
        Log.e("tag", "你点了第"+position+"张轮播图");
    }




    /**
     *  自定义的图片加载器
     */
    private class MyLoader extends ImageLoader {
        @Override
        public void displayImage(Context context, Object path, ImageView imageView) {

            try {
                Glide.with(activity)
//                    .setDefaultRequestOptions( new RequestOptions()
//                            .frame(3000000)
//                            .centerCrop()
//                            .error(R.drawable.banner01_icon)
//                            .placeholder(R.drawable.banner01_icon)
//                            .fitCenter() ) //让图片填充全部
//                    .load(path)
//                    .into(imageView);


                        .load(path)
                        .format(DecodeFormat.PREFER_ARGB_8888)//设置图片解码格式
                        .placeholder(R.drawable.banner01_icon)
                        .dontAnimate()
                        .error(R.drawable.banner01_icon)
                        .into(imageView);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }

    private boolean isSuccessInfo(Map mapInfo) {
        if (mapInfo == null) {
            showToast("刷脸SDK初始化失败！刷脸SDK调起返回为空！");
            new RuntimeException("调用返回为空").printStackTrace();
            return false;
        }
        String code = (String)mapInfo.get(Constants.RETURN_CODE);
        String msg = (String)mapInfo.get(Constants.RETURN_MSG);
        Log.e(TAG, "response | getWxpayfaceRawdata " + code + " | " + msg);
        if (code == null || !code.equals(WxfacePayCommonCode.VAL_RSP_PARAMS_SUCCESS)) {
            showToast("刷脸SDK调起失败！");
            new RuntimeException("调用返回非成功信息: " + msg).printStackTrace();
            finish();
            return false;
        }
        Log.e(TAG, "调用返回成功");
        return true;
    }

    private TextWatcher textWatcher = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {

        }

        @Override
        public void afterTextChanged(Editable s) {
            try{
                int tvlength = etSumMoney.getText().length();
                String tvstr = etSumMoney.getText().toString();
                String cha="";
                String sPstr = (String) sharedPreferencesUtil.getSharedPreference("str","");
                if (tvstr.equals("")) {

                } else {
                    cha = tvstr.substring(tvlength - 1, tvlength);
                    if (sPstr.equals("")) {

                        if (tvlength == 1) {

                            if (sPstr.length() == 2 && tvlength == 1) {

                            }else{
                                soundPool.play(Integer.parseInt(tvstr) + 1, 1,
                                        1, 0, 0, 1);
                            }
                        }
//                    tv.setText(cha);

                    } else if (sPstr.length() < tvstr.length()) {
//                    tv.setText(cha);
                        soundPool.play(Integer.parseInt(cha) + 1, 1, 1, 0,
                                0, 1);
                    } else {
//                    tv.setText(cha);
                    }
                }
                sharedPreferencesUtil.put("str",tvstr);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    };

    @Override
    public void onClick(View v) {
        Intent intent = new Intent();
        switch (v.getId()){
            case R.id.wxface_btDemoTest:
                intent.setClass(activity,IFSMainActivity.class);
                startActivity(intent);
                break;
            case R.id.wxface_btTest:
                intent.setClass(activity,InputAmountActivity.class);
                startActivity(intent);
                break;
            case R.id.main_layoutMoney:
//                intent.setClass(activity,InputAmountActivity.class);
//                startActivity(intent);
                break;
                default:
                    break;
        }
    }


    BroadcastReceiver USBPrintReceiver = new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            // TODO Auto-generated method stub
            String state = intent.getExtras().getString("state");
            if(Utils.isNotEmpty(state)){
                if(state.equals(USBPrinter.USB_CONN_STATUS_INPUT)){

                    //初始化打印机
                    USBPrinter.initPrinter(activity,true);
                    usbKeyboard.openKayboard(activity);
                    usbKeyboard.getOnKeyboardValueListener(MainActivity.this);

                    Log.e(TAG,"设备插入！");
                }else if(state.equals(USBPrinter.USB_CONN_STATUS_OUTPUT)){
                    usbKeyboard.release();
                    Log.e(TAG,"设备拔出！");

                }else if(state.equals(USBPrinter.USB_CONN_STATUS_DISABLE)){

                }
            }

        }
    };

    BroadcastReceiver keyboardReceiver = new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            // TODO Auto-generated method stub
            String state = intent.getExtras().getString("state");
            if(Utils.isNotEmpty(state)){
                if(state.equals(USBKeyboard.KEYBOARD_STATE_RELEASE)){
                    usbKeyboard.openKayboard(activity);
                    usbKeyboard.getOnKeyboardValueListener(MainActivity.this);

                    Log.e(TAG,"键盘释放完成重新打开键盘！");
                }else if(state.equals(USBKeyboard.KEYBOARD_STATE_EXCEPTION)){
                    usbKeyboard.openKayboard(activity);
                    usbKeyboard.getOnKeyboardValueListener(MainActivity.this);
                    Log.e(TAG,"键盘异常！");
                }
            }

        }
    };



    /**
     * 定制键盘
     */
    @Override
    public void getKeyboardValue(int keyCode,String keyName,double money,String text) {
        etSumMoney.requestFocus();
        Log.e(TAG,"接收的金额："+String.valueOf(money));
        Log.e(TAG,"屏幕更新的值："+text);
        if(isKeyboardValidity){
            if(keyCode == -1&&"ESC".equals(keyName)){
                //初始化显示
                etSumMoney.setText("");
            }else if(USBKeyboard.KEY_CODE_ESC==keyCode&&USBKeyboard.KEY_NAME_ESC.equals(keyName)){
                //点击取消键显示
                stop();
                speak("取消");
                etSumMoney.setText("");
            }else if(USBKeyboard.KEY_CODE_BACK==keyCode&&USBKeyboard.KEY_NAME_BACK.equals(keyName)){
                //点击退格键显示
                if("0".equals(text)){

                    etSumMoney.setText("");
                }else{
                    etSumMoney.setText(text);
                }
            }else if(USBKeyboard.KEY_CODE_REFUND==keyCode&&USBKeyboard.KEY_NAME_REFUND.equals(keyName)){
                if(Utils.isFastClick()){
                    return;
                }
                //点击退款键显示
                if("0".equals(text)){
                    String key = "SL";
                    /*回车键*/
                    String valueStr = "";
                    payMethodOne(valueStr,key);
                }else{
                    String key = "SLYSQ";
                    /*回车键*/
                    String valueStr = text;
                    payMethodOne(valueStr,key);
                }



            }else if(USBKeyboard.KEY_CODE_OPT==keyCode&&USBKeyboard.KEY_NAME_OPT.equals(keyName)){
                if(Utils.isFastClick()){
                    return;
                }
                //点击设置键
                speak("设置");
                Intent intent = new Intent();
                intent.setClass(activity,MenuManageActivity.class);
                intent.putExtra("userBean",userBean);
                startActivity(intent);
            }else if(USBKeyboard.KEY_CODE_LIST==keyCode&&USBKeyboard.KEY_NAME_LIST.equals(keyName)){
                if(Utils.isFastClick()){
                    return;
                }
                //点击清单键

            }else if(USBKeyboard.KEY_CODE_PAY==keyCode&&USBKeyboard.KEY_NAME_PAY.equals(keyName)){
                if(Utils.isFastClick()){
                    return;
                }
                //点击支付键
                String key = "SL";
                String valueStr = String.valueOf(money);
                payMethodOne(valueStr,key);
//                usbKeyboard.showTip(valueStr);
            }else{
                etSumMoney.setText(text);
            }
        }




    }



    /**
     * 青蛙自带键盘
     */
    @Override
    public boolean dispatchKeyEvent(KeyEvent event) {
        try {
            registerPermission();
        }catch (Exception e){
            e.printStackTrace();
        }

        Log.e("event的值", "event= "+event);
        try {
            if(event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_DOT){

                Log.e(TAG,"按下键盘.键");
                speak("点");


            }
            String value = USBkeyboardUtil.getKeyValue(event,pending);
            if(Utils.isEmpty(value)){
                etSumMoney.setText("");
            }else{
                etSumMoney.setText(value);
            }

            if(event.getAction() == KeyEvent.ACTION_DOWN){
                if(event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_ENTER||event.getKeyCode() == KeyEvent.KEYCODE_ENTER){

                    String key = "SL";
                    /*回车键*/
                    String valueStr = pending.toString();
                    Log.e(TAG,"输入金额"+valueStr);
                    payMethodOne(valueStr,key);
                }
            }


            if(event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_DEL){
                /*0键*/
                Log.e(TAG,"按下键盘回退/删除键");
                if (pending.length() != 0) {
                    pending = pending.delete(pending.length() - 1, pending.length());
                    etSumMoney.setText("￥"+pending);
                    if("0".equals(pending.toString())){
                        //清空pending
                        pending.delete( 0, pending.length() );
                    }
                    if(pending.length()<=0){
                        etSumMoney.setText("");
                    }
                }
//            finish();
            }
            if(event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_BACK){
                /*0键*/
                Log.e(TAG,"按下back键");
                finish();

            }

            if(event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_TAB){
                Log.e(TAG,"按下TAB设置键");
                speak("设置");
                Intent intent = new Intent();
                intent.setClass(activity,MenuManageActivity.class);
                intent.putExtra("userBean",userBean);
                startActivity(intent);

            }
            if(event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_F1){
                Log.e(TAG,"按下F1键");
//                Intent intent = new Intent();
//                intent.setClass(activity,CardVerificaActivity.class);
//                intent.putExtra("userBean",userBean);
//                startActivity(intent);
                //将F1原卡劵核销快捷键改为预授权撤销快捷键
                speak("预授权撤销");
                Intent intent = new Intent();
                intent.setClass(activity,EnterPasswdActivity.class);
                intent.putExtra("userBean",userBean);
                intent.putExtra("action",Constants.ACTION_PASSWD_AUTH_CANCEL);
                startActivity(intent);

            }


            if(event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_F2){
                Log.e(TAG,"按下F2键");
                String key = "SLYSQ";
                String valueStr = pending.toString();
                Log.e(TAG,"输入金额"+valueStr);
                payMethodOne(valueStr,key);

            }

            if(event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_F3){
                Log.e(TAG,"按下F3键");
                String authAction = "3";
                WdPreAuthHistoryVO order = null;
                Intent intent = new Intent();
                intent.setClass(activity,AuthConfirmActivity.class);
                intent.putExtra("userBean",userBean);
                intent.putExtra("order",order);
                intent.putExtra("authAction",authAction);
                startActivity(intent);

            }
        }catch (Exception e){
            e.printStackTrace();
        }


        /**
         * 这里直接return true，防止事件向上传递，改变最终输入结果
         */
//        return super.dispatchKeyEvent(event);
        return true;
    }


}
